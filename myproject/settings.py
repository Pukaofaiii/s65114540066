"""
Django settings for myproject project (Production-ready, PostgreSQL).
Generated by 'django-admin startproject' using Django 4.2.x
"""

import os
from pathlib import Path

# ------------------------------------------------------------
# Base paths
# ------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# ------------------------------------------------------------
# Env helpers
# ------------------------------------------------------------
def env_bool(name: str, default: bool = False) -> bool:
    return os.getenv(name, str(int(default))).lower() in ("1", "true", "yes")

def env_list(name: str, default: str = "") -> list[str]:
    raw = os.getenv(name, default)
    return [x.strip() for x in raw.split(",") if x.strip()]

# ------------------------------------------------------------
# Core / Security
# ------------------------------------------------------------
# ควรตั้งผ่าน .env ในโปรดักชัน
SECRET_KEY = os.getenv("SECRET_KEY", "change-me")

# DEBUG อ่านได้ทั้ง 1/true/yes
DEBUG = env_bool("DEBUG", False)

# โฮสต์ที่อนุญาต (ค่าเริ่มต้น: localhost)
ALLOWED_HOSTS = env_list("ALLOWED_HOSTS", "localhost,127.0.0.1")

# พอร์ตประจำตัวสำหรับงาน (เช่น 0066 → เว็บคือ 10066)
# ใช้เพื่อกำหนดค่า default ของ CSRF_TRUSTED_ORIGINS ให้ตรงพอร์ตเว็บ
PORT_SUFFIX = os.getenv("PORT_SUFFIX", "0066")

# CSRF origins (มีพอร์ต 10066 เป็นค่า default ตามโจทย์; ปรับเพิ่มได้ผ่าน .env)
CSRF_TRUSTED_ORIGINS = env_list(
    "CSRF_TRUSTED_ORIGINS",
    f"http://localhost:1{PORT_SUFFIX},http://127.0.0.1:1{PORT_SUFFIX}"
)

# ------------------------------------------------------------
# Applications
# ------------------------------------------------------------
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Project apps
    "web_app",
    "user_login",
    "form_service",
    "admin_app",

    # 3rd-party
    "crispy_forms",
    "crispy_tailwind",
    "channels",
    "corsheaders",
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

ASGI_APPLICATION = "myproject.asgi.application"

# Channels: ในโปรดักชันจริง แนะนำใช้ Redis; ตอนนี้ใช้ InMemory ให้ตรงของเดิม
CHANNEL_LAYERS = {
    "default": {"BACKEND": "channels.layers.InMemoryChannelLayer"}
}

# ------------------------------------------------------------
# Middleware  (ต้องวาง corsheaders ก่อน CommonMiddleware)
# ------------------------------------------------------------
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",          # ← มาก่อน CommonMiddleware
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",      # ← มีครั้งเดียว
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# CORS: ปิดค่าเริ่มต้นไว้เพื่อความปลอดภัย (เปิดเฉพาะที่จำเป็นผ่าน allowlist ถ้าต้องใช้)
CORS_ALLOW_ALL_ORIGINS = env_bool("CORS_ALLOW_ALL_ORIGINS", False)

# ------------------------------------------------------------
# URLs / Templates / WSGI
# ------------------------------------------------------------
ROOT_URLCONF = "myproject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "myproject.wsgi.application"

# ------------------------------------------------------------
# Database (PostgreSQL)
# ------------------------------------------------------------
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", "mydb"),
        "USER": os.getenv("POSTGRES_USER", "myuser"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", "mypassword"),
        "HOST": os.getenv("POSTGRES_HOST", "postgres"),  # ชื่อ service ใน docker-compose
        "PORT": os.getenv("POSTGRES_PORT", "5432"),
        "CONN_MAX_AGE": 60,  # ค้างคอนเนกชันเพื่อประสิทธิภาพ
    }
}

# ------------------------------------------------------------
# Password validation
# ------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ------------------------------------------------------------
# I18N / TZ
# ------------------------------------------------------------
LANGUAGE_CODE = "th"
TIME_ZONE = "Asia/Bangkok"
USE_I18N = True
USE_TZ = True

# ------------------------------------------------------------
# Static / Media
# ------------------------------------------------------------
STATIC_URL = "/static/"
MEDIA_URL = "/media/"

# โครงสร้างจากเดิมของคุณ
STATIC_ROOT = "/vol/web/static"
MEDIA_ROOT = "/vol/web/media"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "staticfiles")]

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ------------------------------------------------------------
# Auth
# ------------------------------------------------------------
LOGIN_URL = "/login/"

# ------------------------------------------------------------
# Security headers (เปิดเพิ่มเมื่อมี HTTPS/Reverse proxy)
# ------------------------------------------------------------
SECURE_SSL_REDIRECT = env_bool("SECURE_SSL_REDIRECT", False)
SESSION_COOKIE_SECURE = env_bool("SESSION_COOKIE_SECURE", False)
CSRF_COOKIE_SECURE = env_bool("CSRF_COOKIE_SECURE", False)
SECURE_HSTS_SECONDS = int(os.getenv("SECURE_HSTS_SECONDS", "0"))
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"
# ------------------------------------------------------------
# Logging
# ------------------------------------------------------------
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {"console": {"class": "logging.StreamHandler"}},
    "root": {"handlers": ["console"], "level": os.getenv("LOG_LEVEL", "INFO" if not DEBUG else "DEBUG")},
}
